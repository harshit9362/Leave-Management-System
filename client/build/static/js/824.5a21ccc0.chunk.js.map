{"version":3,"file":"static/js/824.5a21ccc0.chunk.js","mappings":"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","sources":["components/LanguageDropdown/index.js","components/Ui/NotificationDropdown.js","components/Ui/ProfileDropdown.js","components/Ui/SearchDropdown.js","components/Ui/TopbarSearch.js","helpers/GroupByFields.js","components/AppsDropdown/index.js","layouts/Topbar.js"],"sourcesContent":["// Internal Lib Import\nimport React, { useState } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport i18next from \"i18next\";\n\nimport enFlag from \"./flags/us.jpg\";\nimport bnFlag from \"./flags/bangladesh.png\";\nimport germanyFlag from \"./flags/germany.jpg\";\nimport italyFlag from \"./flags/italy.jpg\";\nimport spainFlag from \"./flags/spain.jpg\";\nimport russiaFlag from \"./flags/russia.jpg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SetLanguage } from \"../../redux/slices/SettingSlice\";\n\n// Get the languages\nconst Languages = [\n  {\n    display: \"Bangla\",\n    name: \"bn\",\n    flag: bnFlag,\n  },\n  {\n    display: \"English\",\n    name: \"en\",\n    flag: enFlag,\n  },\n  {\n    display: \"German\",\n    name: \"de\",\n    flag: germanyFlag,\n  },\n  {\n    display: \"Italian\",\n    name: \"it\",\n    flag: italyFlag,\n  },\n  {\n    display: \"Spanish\",\n    name: \"es\",\n    flag: spainFlag,\n  },\n  {\n    display: \"Russian\",\n    name: \"ru\",\n    flag: russiaFlag,\n  },\n];\n\nconst LanguageDropdown = (): React$Element<any> => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const state = useSelector((state) => state.Setting);\n\n  let Language = Languages.find((item) => item.name === state.Language);\n\n  Language = Language || {\n    display: \"English\",\n    name: \"en\",\n    flag: enFlag,\n  };\n\n  const dispatch = useDispatch();\n\n  const toggleDropdown = ({ dropdownOpen: boolean }) => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  const handleLanguage = (index) => {\n    i18next.changeLanguage(Languages[index].name);\n    dispatch(SetLanguage(Languages[index].name));\n  };\n\n  return (\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-languages\"\n        onClick={toggleDropdown}\n        className=\"nav-link dropdown-toggle arrow-none\"\n      >\n        <img\n          src={Language.flag}\n          alt={Language.name}\n          className=\"me-0 me-sm-1\"\n          height=\"12\"\n        />\n        <span className=\"align-middle d-none d-sm-inline-block\">\n          {Language.display}\n        </span>\n        <i className=\"mdi mdi-chevron-down d-none d-sm-inline-block align-middle\"></i>\n      </Dropdown.Toggle>\n      <Dropdown.Menu\n        align={\"end\"}\n        className=\"dropdown-menu-animated topbar-dropdown-menu\"\n      >\n        <div onClick={toggleDropdown}>\n          {Languages.map((lang, i) => {\n            return (\n              <span\n                className=\"dropdown-item notify-item\"\n                key={i + \"-lang\"}\n                onClick={() => handleLanguage(i)}\n                style={{ cursor: \"pointer\" }}\n              >\n                <img\n                  src={lang.flag}\n                  alt={lang.name}\n                  className=\"me-1\"\n                  height=\"12\"\n                />\n                <span className=\"align-middle\">{lang.display}</span>\n              </span>\n            );\n          })}\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default LanguageDropdown;\n","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport SimpleBar from 'simplebar-react';\nimport classNames from 'classnames';\n\n// notifiaction continer styles\nconst notificationContainerStyle = {\n    maxHeight: '300px',\n    display: 'none',\n};\n\nconst notificationShowContainerStyle = {\n    maxHeight: '300px',\n};\n\ntype Message = {\n    id: number,\n    title: string,\n    time?: string,\n    subText: string,\n    avatar?: string,\n    icon?: string,\n    variant?: string,\n    isRead: boolean,\n};\n\ntype NotificationItem = {\n    day: string,\n    messages: Message[],\n};\n\ntype NotificationDropdownProps = {\n    notifications: Array<NotificationItem>,\n};\n\ntype NotificationDropdownState = {\n    dropdownOpen?: boolean,\n    notificationContainerStyle?: {},\n};\n\nconst NotificationDropdown = (\n    props: NotificationDropdownProps,\n    state: NotificationDropdownState\n): React$Element<any> => {\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [notificationContentStyle, setNotificationContentStyles] = useState(notificationContainerStyle);\n\n    /*\n     * toggle notification-dropdown\n     */\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n        setNotificationContentStyles(\n            notificationContentStyle === notificationContainerStyle\n                ? notificationShowContainerStyle\n                : notificationContainerStyle\n        );\n    };\n\n    return (\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-notification\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\">\n                <i className=\"dripicons-bell noti-icon\"></i>\n                <span className=\"noti-icon-badge\"></span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg\">\n                <div onClick={toggleDropdown}>\n                    <div className=\"dropdown-item noti-title px-3\">\n                        <h5 className=\"m-0\">\n                            <span className=\"float-end\">\n                                <Link to=\"/notifications\" className=\"text-dark\">\n                                    <small>Clear All</small>\n                                </Link>\n                            </span>\n                            Notification\n                        </h5>\n                    </div>\n                    <SimpleBar className=\"px-3\" style={notificationContentStyle}>\n                        {props.notifications.map((item, i) => {\n                            return (\n                                <React.Fragment key={i.toString()}>\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\n                                    {(item.messages || []).map((message, index) => {\n                                        return (\n                                            <Dropdown.Item\n                                                key={index + '-noti'}\n                                                className={classNames(\n                                                    'p-0 notify-item card shadow-none mb-2',\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\n                                                )}>\n                                                <Card.Body>\n                                                    <span className=\"float-end noti-close-btn text-muted\">\n                                                        <i className=\"mdi mdi-close\"></i>\n                                                    </span>\n                                                    <div className=\"d-flex align-items-center\">\n                                                        <div className=\"flex-shrink-0\">\n                                                            <div\n                                                                className={classNames(\n                                                                    'notify-icon',\n                                                                    message.variant && 'bg-' + message.variant\n                                                                )}>\n                                                                {message.avatar ? (\n                                                                    <img\n                                                                        src={message.avatar}\n                                                                        className=\"img-fluid rounded-circle\"\n                                                                        alt=\"\"\n                                                                    />\n                                                                ) : (\n                                                                    <i className={message.icon}></i>\n                                                                )}\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\n                                                                {message.title}{' '}\n                                                                {message.time && (\n                                                                    <small className=\"fw-normal text-muted ms-1\">\n                                                                        {message.time}\n                                                                    </small>\n                                                                )}\n                                                            </h5>\n                                                            <small className=\"noti-item-subtitle text-muted\">\n                                                                {message.subText}\n                                                            </small>\n                                                        </div>\n                                                    </div>\n                                                </Card.Body>\n                                            </Dropdown.Item>\n                                        );\n                                    })}\n                                </React.Fragment>\n                            );\n                        })}\n\n                        <div className=\"text-center\">\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\n                        </div>\n                    </SimpleBar>\n\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\n                        View All\n                    </Dropdown.Item>\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default NotificationDropdown;\n","// @flow\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from \"react-bootstrap\";\nimport classNames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { SetLogout } from \"../../redux/slices/AuthSlice\";\n\nconst ProfileDropdown = (props) => {\n  const profilePic = props.profilePic || null;\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  /*\n   * toggle profile-dropdown\n   */\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  return (\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-profile\"\n        as={Link}\n        to=\"#\"\n        onClick={toggleDropdown}\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\n      >\n        <span className=\"account-user-avatar\">\n          <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\n        </span>\n        <span>\n          <span className=\"account-user-name\">{props.username}</span>\n          <span className=\"account-position\">{props.userTitle}</span>\n        </span>\n      </Dropdown.Toggle>\n      <Dropdown.Menu\n        align={\"end\"}\n        className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\"\n      >\n        <div onClick={toggleDropdown}>\n          <div className=\"dropdown-header noti-title\">\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\n          </div>\n          {props.menuItems.map((item, i) => {\n            return item.label === \"Logout\" ? (\n              <Link\n                onClick={() => dispatch(SetLogout())}\n                to={item.redirectTo}\n                className=\"dropdown-item notify-item\"\n                key={i + \"-profile-menu\"}\n              >\n                <i className={classNames(item.icon, \"me-1\")}></i>\n                <span>{item.label}</span>\n              </Link>\n            ) : (\n              <Link\n                to={item.redirectTo}\n                className=\"dropdown-item notify-item\"\n                key={i + \"-profile-menu\"}\n              >\n                <i className={classNames(item.icon, \"me-1\")}></i>\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default ProfileDropdown;\n","// @flow\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from \"react-bootstrap\";\n\nconst SearchDropdown = (): React$Element<any> => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  /*\n   * toggle search-dropdown\n   */\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  return (\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-apps\"\n        as={Link}\n        to=\"#\"\n        onClick={toggleDropdown}\n        className=\"nav-link dropdown-toggle arrow-none\"\n      >\n        <i className=\"dripicons-search noti-icon\"></i>\n      </Dropdown.Toggle>\n\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg p-0\">\n        <form className=\"p-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search ...\"\n          />\n        </form>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default SearchDropdown;\n","// @flow\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Select, { components } from \"react-select\";\nimport classNames from \"classnames\";\n\n// utils\nimport { GroupByFields } from \"../../helpers/GroupByFields\";\n\n// images\nimport Avatar2 from \"../../assets/images/users/avatar-2.jpg\";\nimport Avatar5 from \"../../assets/images/users/avatar-5.jpg\";\n\n/*\n * get options\n */\nconst optionGetter = (option) => {\n  switch (option.type) {\n    case \"report\":\n      return (\n        <Link\n          to=\"#\"\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\n        >\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\n          <span>{option.label}</span>\n        </Link>\n      );\n    case \"help\":\n      return (\n        <Link\n          to=\"#\"\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\n        >\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\n          <span>{option.label}</span>\n        </Link>\n      );\n    case \"settings\":\n      return (\n        <Link\n          to=\"#\"\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\n        >\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\n          <span>{option.label}</span>\n        </Link>\n      );\n    case \"title\":\n      return (\n        <div className=\"noti-title\">\n          <h6 className=\"text-overflow mb-2 text-uppercase\">Users</h6>\n        </div>\n      );\n    case \"users\":\n      return (\n        <>\n          <Link to=\"#\" className=\"dropdown-item notify-item p-0\">\n            <div className=\"d-flex\">\n              <img\n                src={option.userDetails.avatar}\n                alt=\"\"\n                className=\"d-flex me-2 rounded-circle\"\n                height=\"32\"\n              />\n              <div className=\"w-100\">\n                <h5 className=\"drop-username m-0 font-14\">\n                  {option.userDetails.firstname} {option.userDetails.lastname}\n                </h5>\n                <span className=\"user-subinfo font-12 mb-0\">\n                  {option.userDetails.position}\n                </span>\n              </div>\n            </div>\n          </Link>\n        </>\n      );\n\n    default:\n      return;\n  }\n};\n\n/*\n * filter options\n */\nconst formateOptions = (options) => {\n  const grouppedData = GroupByFields(options, (item) => {\n    return [item.type];\n  });\n\n  let formattedOptions = [];\n  let count = 0;\n\n  for (let i = 0; i < grouppedData.length; i++) {\n    for (let j = 0; j < grouppedData[i].length; j++) {\n      if (grouppedData[i][j].type === \"users\" && count === 0) {\n        grouppedData[i].splice(j, 0, {\n          label: \"Users\",\n          value: \"title\",\n          type: \"title\",\n        });\n        count = 1;\n      }\n      formattedOptions.push(grouppedData[i][j]);\n    }\n  }\n  return formattedOptions;\n};\n\n/* custon control */\nconst Control = ({ children, ...props }) => {\n  const { handleClick } = props.selectProps;\n  return (\n    <components.Control {...props}>\n      <span\n        onMouseDown={handleClick}\n        className=\"mdi mdi-magnify search-icon\"\n      ></span>\n      {children}\n    </components.Control>\n  );\n};\n\n/* custon indicator */\n\nconst IndicatorsContainer = (props) => {\n  const { handleClick } = props.selectProps;\n  return (\n    <div style={{}}>\n      <components.IndicatorsContainer {...props} className=\"input-group\">\n        <button\n          className=\"btn btn-primary input-group-text\"\n          onMouseDown={handleClick}\n        >\n          Search\n        </button>\n      </components.IndicatorsContainer>\n    </div>\n  );\n};\n\n/* custom menu list */\nconst MenuList = (props) => {\n  const { options } = props.selectProps;\n\n  return (\n    <components.MenuList {...props}>\n      {/* menu header */}\n      <div className=\"dropdown-header noti-title\">\n        <h5 className=\"text-overflow mb-2\">\n          Found <span className=\"text-danger\">{options.length}</span> results\n        </h5>\n      </div>\n      {props.children}\n    </components.MenuList>\n  );\n};\n\n/* fomates the option label */\nconst handleFormatOptionLabel = (option) => {\n  const formattedOption = optionGetter(option);\n  return <div>{formattedOption}</div>;\n};\n\ntype TopbarSearchProps = {};\n\nconst TopbarSearch = (props: TopbarSearchProps): React$Element<any> => {\n  const options = [\n    {\n      value: \"1\",\n      label: \"Analytics Report\",\n      icon: \"uil-notes\",\n      type: \"report\",\n    },\n    {\n      value: \"2\",\n      label: \"How can I help you?\",\n      icon: \"uil-life-ring\",\n      type: \"help\",\n    },\n    {\n      value: \"3\",\n      label: \"User profile settings\",\n      icon: \"uil-cog\",\n      type: \"settings\",\n    },\n    {\n      label: \"Erwin Brown\",\n      value: \"users1\",\n      type: \"users\",\n      userDetails: {\n        firstname: \"Erwin\",\n        lastname: \"Brown\",\n        position: \"UI Designer\",\n        avatar: Avatar2,\n      },\n    },\n    {\n      label: \"Jacob Deo\",\n      value: \"users2\",\n      type: \"users\",\n      userDetails: {\n        firstname: \"Jacob\",\n        lastname: \"Deo\",\n        position: \"Developer\",\n        avatar: Avatar5,\n      },\n    },\n  ];\n\n  const onClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  return (\n    <>\n      <Select\n        {...props}\n        components={{ Control, IndicatorsContainer, MenuList }}\n        placeholder={\"Search...\"}\n        options={formateOptions(options)}\n        formatOptionLabel={handleFormatOptionLabel}\n        isOptionDisabled={(option) => option.type === \"title\"}\n        maxMenuHeight=\"350px\"\n        handleClick={onClick}\n        isSearchable\n        isClearable\n        name=\"search-app\"\n        className=\"app-search dropdown\"\n        classNamePrefix=\"react-select\"\n      />\n    </>\n  );\n};\n\nexport default TopbarSearch;\n","const GroupByFields = (array: Array<any>, f: any): Array<any> => {\n  var groups = {};\n  array.forEach((o) => {\n    var group = JSON.stringify(f(o));\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map((group) => {\n    return groups[group];\n  });\n};\n\nexport { GroupByFields };\n","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\n\n// apps icon\nimport slackIcon from './icons/slack.png';\nimport bitbucketIcon from './icons/bitbucket.png';\nimport dribbbleIcon from './icons/dribbble.png';\nimport dropboxIcon from './icons/dropbox.png';\nimport githubIcon from './icons/github.png';\nimport gSuiteIcon from './icons/g-suite.png';\n\n// get the apps\nconst Apps = [\n    {\n        name: 'Slack',\n        icon: slackIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'GitHub',\n        icon: githubIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Dribbble',\n        icon: dribbbleIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Bitbucket',\n        icon: bitbucketIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Dropbox',\n        icon: dropboxIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'G Suite',\n        icon: gSuiteIcon,\n        redirectTo: '#',\n    },\n];\n\ntype AppsDropdownProps = {};\n\nconst AppsDropdown = (props: AppsDropdownProps): React$Element<any> => {\n    const apps = Apps || [];\n    const chunk_size = 3;\n    const appsChunks = Array(Math.ceil(apps.length / chunk_size))\n        .fill()\n        .map((_, index) => index * chunk_size)\n        .map((begin) => apps.slice(begin, begin + chunk_size));\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    /*\n     * toggle apps-dropdown\n     */\n    const toggleDropdown = ({ dropdownOpen: boolean }) => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    return (\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-apps\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\">\n                <i className=\"dripicons-view-apps noti-icon\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg p-0\">\n                <div onClick={toggleDropdown} className=\"p-2\">\n                    {appsChunks.map((chunk, idx) => (\n                        <div className=\"row g-0\" key={idx}>\n                            {chunk.map((item, i) => (\n                                <div className=\"col\" key={i}>\n                                    <Link className=\"dropdown-icon-item\" to={item.redirectTo}>\n                                        <img src={item.icon} alt=\"\" />\n                                        <span>{item.name}</span>\n                                    </Link>\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default AppsDropdown;\n","// @flow\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport classNames from \"classnames\";\n\n// actions\nimport { ChangeLeftSideBarType, SetTheme } from \"../redux/slices/SettingSlice\";\n\n// components\nimport LanguageDropdown from \"../components/LanguageDropdown\";\nimport NotificationDropdown from \"../components/Ui/NotificationDropdown\";\nimport ProfileDropdown from \"../components/Ui/ProfileDropdown\";\nimport SearchDropdown from \"../components/Ui/SearchDropdown\";\nimport TopbarSearch from \"../components/Ui/TopbarSearch\";\nimport AppsDropdown from \"../components/AppsDropdown/\";\n\n// images\nimport avatar1 from \"../assets/images/users/avatar-2.jpg\";\nimport avatar2 from \"../assets/images/users/avatar-4.jpg\";\nimport logoSmDark from \"../assets/images/logo_sm_dark.png\";\nimport logoSmLight from \"../assets/images/logo_sm.png\";\nimport logo from \"../assets/images/logo.png\";\n\n//constants\nimport * as layoutConstants from \"../redux/slices/SettingSlice\";\n\n// get the notifications\nconst Notifications = [\n  {\n    day: \"Today\",\n    messages: [\n      {\n        id: 1,\n        title: \"Datacorp\",\n        subText: \"Caleb Flakelar commented on Admin\",\n        time: \"1 min ago\",\n        icon: \"mdi mdi-comment-account-outline\",\n        variant: \"primary\",\n        isRead: false,\n      },\n      {\n        id: 2,\n        title: \"Admin\",\n        subText: \"New user registered.\",\n        time: \"1 hours ago\",\n        icon: \"mdi mdi-account-plus\",\n        variant: \"info\",\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: \"Yesterday\",\n    messages: [\n      {\n        id: 1,\n        title: \"Cristina Pride\",\n        subText: \"Hi, How are you? What about our next meeting\",\n        time: \"1 day ago\",\n        avatar: avatar1,\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: \"30 Dec 2021\",\n    messages: [\n      {\n        id: 1,\n        title: \"Datacorp\",\n        subText: \"Caleb Flakelar commented on Admin\",\n        icon: \"mdi mdi-comment-account-outline\",\n        variant: \"primary\",\n        isRead: true,\n      },\n      {\n        id: 2,\n        title: \"Karen Robinson\",\n        subText: \"Wow ! this admin looks good and awesome design\",\n        avatar: avatar2,\n        isRead: true,\n      },\n    ],\n  },\n];\n\n// get the profilemenu\nconst ProfileMenus = [\n  {\n    label: \"My Account\",\n    icon: \"mdi mdi-account-circle\",\n    redirectTo: \"/account/profile\",\n  },\n  {\n    label: \"Settings\",\n    icon: \"mdi mdi-account-edit\",\n    redirectTo: \"/account/setting\",\n  },\n  {\n    label: \"Logout\",\n    icon: \"mdi mdi-logout\",\n    redirectTo: \"/account/logout\",\n  },\n];\n\nconst Topbar = ({\n  hideLogo,\n  navCssClasses,\n  openLeftMenuCallBack,\n  topbarDark,\n}) => {\n  const dispatch = useDispatch();\n\n  const [isopen, setIsopen] = useState(false);\n  const { UserDetails } = useSelector((state) => state.User);\n\n  const navbarCssClasses = navCssClasses || \"\";\n  const containerCssClasses = !hideLogo ? \"container-fluid\" : \"\";\n\n  const { LayoutType, LeftSideBarType, LayoutColor } = useSelector(\n    (state) => state.Setting,\n  );\n\n  /**\n   * Toggle the leftmenu when having mobile screen\n   */\n  const handleLeftMenuCallBack = () => {\n    setIsopen((prevState) => !prevState);\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n    switch (LayoutType) {\n      case layoutConstants.LAYOUT_VERTICAL:\n        // condition added\n        if (window.innerWidth >= 768) {\n          if (LeftSideBarType === \"fixed\" || LeftSideBarType === \"scrollable\")\n            dispatch(\n              ChangeLeftSideBarType(\n                layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED,\n              ),\n            );\n          if (LeftSideBarType === \"condensed\")\n            dispatch(\n              ChangeLeftSideBarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED),\n            );\n        }\n        break;\n\n      case layoutConstants.LAYOUT_FULL:\n        if (document.body) {\n          document.body.classList.toggle(\"hide-menu\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div className={classNames(\"navbar-custom\", navbarCssClasses)}>\n        <div className={containerCssClasses}>\n          {!hideLogo && (\n            <Link to=\"/\" className=\"topnav-logo\">\n              <span className=\"topnav-logo-lg\">\n                <img src={logo} alt=\"logo\" height=\"16\" />\n              </span>\n              <span className=\"topnav-logo-sm\">\n                <img\n                  src={topbarDark ? logoSmLight : logoSmDark}\n                  alt=\"logo\"\n                  height=\"16\"\n                />\n              </span>\n            </Link>\n          )}\n\n          <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n            <li className=\"notification-list topbar-dropdown d-xl-none\">\n              <SearchDropdown />\n            </li>\n            <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\n              <LanguageDropdown />\n            </li>\n            <li className=\"dropdown notification-list\">\n              <NotificationDropdown notifications={Notifications} />\n            </li>\n            <li className=\"dropdown notification-list d-none d-sm-inline-block\">\n              <AppsDropdown />\n            </li>\n            <li className=\"notification-list\">\n              {LayoutColor === \"light\" ? (\n                <button\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                  onClick={() => dispatch(SetTheme(\"dark\"))}\n                >\n                  <i className=\"uil-moon noti-icon\"></i>\n                </button>\n              ) : (\n                <button\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                  onClick={() => dispatch(SetTheme(\"light\"))}\n                >\n                  <i className=\"uil-sun noti-icon\"></i>\n                </button>\n              )}\n            </li>\n            <li className=\"dropdown notification-list\">\n              <ProfileDropdown\n                profilePic={UserDetails?.Image}\n                menuItems={ProfileMenus}\n                username={UserDetails?.FirstName + \" \" + UserDetails?.LastName}\n                userTitle={UserDetails?.Roles}\n              />\n            </li>\n          </ul>\n          {/* toggle for vertical layout */}\n          {(LayoutType === layoutConstants.LAYOUT_VERTICAL ||\n            LayoutType === layoutConstants.LAYOUT_FULL) && (\n            <button\n              className=\"button-menu-mobile open-left\"\n              onClick={handleLeftMenuCallBack}\n            >\n              <i className=\"mdi mdi-menu\" />\n            </button>\n          )}\n\n          {/* toggle for horizontal layout */}\n          {LayoutType === layoutConstants.LAYOUT_HORIZONTAL && (\n            <Link\n              to=\"#\"\n              className={classNames(\"navbar-toggle\", { open: isopen })}\n              onClick={handleLeftMenuCallBack}\n            >\n              <div className=\"lines\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </Link>\n          )}\n\n          {/* toggle for detached layout */}\n          {LayoutType === layoutConstants.LAYOUT_DETACHED && (\n            <Link\n              to=\"#\"\n              className=\"button-menu-mobile disable-btn\"\n              onClick={handleLeftMenuCallBack}\n            >\n              <div className=\"lines\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </Link>\n          )}\n          <TopbarSearch />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Topbar;\n"],"names":["Languages","display","name","flag","enFlag","_useState","useState","_useState2","_slicedToArray","dropdownOpen","setDropdownOpen","state","useSelector","Setting","Language","find","item","dispatch","useDispatch","toggleDropdown","_ref","_jsxs","Dropdown","show","onToggle","children","variant","id","onClick","className","_jsx","src","alt","height","align","map","lang","i","index","i18next","SetLanguage","style","cursor","notificationContainerStyle","maxHeight","notificationShowContainerStyle","props","_useState3","_useState4","notificationContentStyle","setNotificationContentStyles","as","Link","to","SimpleBar","notifications","React","day","messages","message","classNames","isRead","Card","avatar","icon","title","time","subText","toString","profilePic","username","userTitle","menuItems","label","SetLogout","redirectTo","type","placeholder","formateOptions","options","grouppedData","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","GroupByFields","formattedOptions","count","length","j","splice","value","Control","_objectWithoutProperties","_excluded","handleClick","selectProps","components","_objectSpread","onMouseDown","IndicatorsContainer","MenuList","handleFormatOptionLabel","option","formattedOption","_Fragment","userDetails","firstname","lastname","position","optionGetter","Avatar2","Select","formatOptionLabel","isOptionDisabled","maxMenuHeight","e","preventDefault","stopPropagation","isSearchable","isClearable","classNamePrefix","Apps","apps","appsChunks","Array","Math","ceil","fill","_","begin","slice","chunk","idx","Notifications","avatar1","ProfileMenus","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","isopen","setIsopen","UserDetails","User","navbarCssClasses","containerCssClasses","_useSelector2","LayoutType","LeftSideBarType","LayoutColor","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","ChangeLeftSideBarType","document","body","classList","toggle","logo","logoSmLight","logoSmDark","SearchDropdown","LanguageDropdown","NotificationDropdown","AppsDropdown","SetTheme","ProfileDropdown","Image","FirstName","LastName","Roles","open","TopbarSearch"],"sourceRoot":""}